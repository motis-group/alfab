name: Deploy Costing App

on:
  push:
    branches:
      - main
    paths:
      - 'web-app/costing/**'  # Only trigger on changes to costing app files

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        working-directory: web-app/costing
        run: npm install

      - name: Build NextJS app
        working-directory: web-app/costing
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to server
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
          REMOTE_PATH: /var/www/costing-app
          APP_PATH: web-app/costing
        run: |
          # Create .env file
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > $APP_PATH/.env

          # Deploy to remote server
          echo "Deploying to remote server..."
          if ! sshpass -p $REMOTE_PASSWORD ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p $REMOTE_PATH"; then
            echo "::error::Failed to create remote directory!"
            exit 1
          fi

          # Copy built files to server
          if ! sshpass -p $REMOTE_PASSWORD scp -o StrictHostKeyChecking=no -r $APP_PATH/.next/* $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/; then
            echo "::error::Failed to copy files to remote server!"
            exit 1
          fi

          # Copy package files and install dependencies
          if ! sshpass -p $REMOTE_PASSWORD scp -o StrictHostKeyChecking=no $APP_PATH/package*.json $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/; then
            echo "::error::Failed to copy package files!"
            exit 1
          fi

          # Install production dependencies on server
          if ! sshpass -p $REMOTE_PASSWORD ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "cd $REMOTE_PATH && npm install --production"; then
            echo "::error::Failed to install dependencies on server!"
            exit 1
          fi

          # Copy .env file
          if ! sshpass -p $REMOTE_PASSWORD scp -o StrictHostKeyChecking=no $APP_PATH/.env $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/; then
            echo "::error::Failed to copy .env file!"
            exit 1
          fi

          # Update nginx configuration
          NGINX_CONFIG="server {
              listen 80;
              server_name costing.yourdomain.com;  # Replace with your domain
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }"

          echo "$NGINX_CONFIG" | sshpass -p $REMOTE_PASSWORD ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "cat > /etc/nginx/sites-available/costing"

          # Enable site and check nginx config
          if ! sshpass -p $REMOTE_PASSWORD ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "ln -sf /etc/nginx/sites-available/costing /etc/nginx/sites-enabled/ && nginx -t"; then
            echo "::error::Nginx configuration test failed!"
            exit 1
          fi

          # Start/restart the NextJS app using PM2
          if ! sshpass -p $REMOTE_PASSWORD ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "cd $REMOTE_PATH && pm2 restart costing-app || pm2 start npm --name 'costing-app' -- start"; then
            echo "::error::Failed to start NextJS app!"
            exit 1
          fi

          # Restart nginx
          if ! sshpass -p $REMOTE_PASSWORD ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "systemctl restart nginx"; then
            echo "::error::Failed to restart nginx!"
            exit 1
          fi

          echo "Deployment completed successfully!" 